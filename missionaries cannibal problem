from collections import deque

# Function to solve the Missionaries and Cannibals problem using BFS
def missionaries_cannibals():
    # Initial state: (missionaries_left, cannibals_left, boat_position)
    start_state = (3, 3, 'left')
    goal_state = (0, 0, 'right')

    # BFS queue, each element is (state, path to reach that state)
    queue = deque([(start_state, [])])
    visited = set([start_state])

    # Valid moves (missionaries, cannibals) in boat
    possible_moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]

    while queue:
        (missionaries, cannibals, boat_position), path = queue.popleft()

        # Check if the goal has been reached
        if (missionaries, cannibals, boat_position) == goal_state:
            return path + [(missionaries, cannibals, boat_position)]

        # Generate possible next states
        for m, c in possible_moves:
            if boat_position == 'left':  # Boat moving from left to right
                new_state = (missionaries - m, cannibals - c, 'right')
            else:  # Boat moving from right to left
                new_state = (missionaries + m, cannibals + c, 'left')

            # Check if the new state is valid
            if is_valid_state(new_state) and new_state not in visited:
                visited.add(new_state)
                queue.append((new_state, path + [(missionaries, cannibals, boat_position)]))

    return "No solution exists."

# Function to check if a state is valid
def is_valid_state(state):
    missionaries, cannibals, boat_position = state

    # Check for valid number of people on each side
    if not (0 <= missionaries <= 3 and 0 <= cannibals <= 3):
        return False

    # Check missionaries are not outnumbered on the left side
    if missionaries > 0 and missionaries < cannibals:
        return False

    # Check missionaries are not outnumbered on the right side
    missionaries_right = 3 - missionaries
    cannibals_right = 3 - cannibals
    if missionaries_right > 0 and missionaries_right < cannibals_right:
        return False

    return True

# Run the function
solution = missionaries_cannibals()

# Print solution steps
if solution != "No solution exists.":
    print("Solution steps:")
    for step in solution:
        missionaries, cannibals, boat_position = step
        print(f"Missionaries left: {missionaries}, Cannibals left: {cannibals}, Boat: {boat_position}")
else:
    print(solution)
